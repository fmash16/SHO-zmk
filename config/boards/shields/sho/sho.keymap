/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define GAME  3
#define SYM  4
#define ALTSHIFT  5
#define BLU 6

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <180>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
//          ------------------------------------------------------------------------------------------------------------
//          |  Q  |  W  |  E   |  R   |  T   |                                           |  Y   |  U    |  I    |  O   |   P   |
//          |  A  |  S  |  D   |  F   |  G   |                                           |  H   |  J    |  K    |  L   |   '   |
//          |  Z  |  X  |  C   |  V   |  B   |                                           |  N   |  M    |  ,    |  .   |   /   |
//                      | ESC  | SPC |  TAB | BOOTLOADER |                         | MUTE | RET | BKSP | DEL |

            bindings = <
&kp Q          &kp W          &kp E          &kp R          &kp T               &kp Y          &kp U          &kp I          &kp O          &kp P
&kp A          &kp S          &kp D          &kp F          &kp G               &kp H          &kp J          &kp K          &kp L          &kp SEMI 
&mt LSHFT Z          &kp X          &kp C          &kp V          &kp B               &kp N          &kp M          &kp COMMA      &kp DOT        &mt RSHFT FSLH
&kp LCTRL      &lt NAV ESC    &kp SPACE                                                                       &lt NUM RET    &lt SYM BSPC    &lt BLU TAB 
            >;
        };

        nav_layer {

            bindings = <
&kp LA(TAB)       &kp LA(N1)        &kp LA(N2)        &kp LA(N3)        &kp LA(N4)        &kp LA(N5)             &kp LA(N6)        &kp LA(N7)         &kp LA(N8)        &kp LA(N9)
&kp LA(A)         &kp LA(S)         &kp LA(D)         &kp LA(F)         &kp LA(G)              &kp LA(H)         &kp LA(J)          &kp LA(K)         &kp LA(L)         &kp LA(SQT)
&lt ALTSHIFT LA(Z)         &kp LA(X)         &kp LA(C)         &kp LA(V)         &kp LA(B)              &kp LA(N)         &kp LA(M)          &kp LA(COMMA)     &kp LA(DOT)       &kp LA(FSLH)
&kp LA(LCTRL)     &lt NAV ESC    &kp SPACE                                                                       &lt NUM LA(RET)   &lt SYM BSPC    &lt BLU LA(TAB) 
            >;
        };

        num_layer {
            
            bindings = <
&kp F12        &kp F7         &kp F8         &kp F9     &trans         &kp C_VOL_UP    &kp N7         &kp N8         &kp N9                &trans
&kp F11        &kp F4         &kp F5         &kp F6     &kp LCTRL      &kp C_VOL_DN    &kp N4         &kp N5         &kp N6                &kp N0
&kp F10        &kp F1         &kp F2         &kp F3     &trans         &trans          &kp N1         &kp N2         &kp N3                &trans
&kp LCTRL      &lt NAV ESC    &kp SPACE                                                               &lt NUM RET    &bootloader    &kp LGUI 
            >;
        };

        game_layer {
            
            bindings = <
&kp F12        &kp F7         &kp F8         &kp F9         &kp PSCRN           &trans         &trans         &trans         &trans         &trans
&kp F11        &kp F4         &kp F5         &kp F6         &kp SYSREQ          &trans         &kp LSHFT      &kp LCTRL      &kp LALT       &kp LGUI
&kp F10        &kp F1         &kp F2         &kp F3         &kp PAUSE_BREAK     &trans         &trans         &trans         &trans         &trans
&kp LCTRL      &lt NAV ESC    &kp SPACE                                                                       &lt NUM RET    &lt SYM BSPC    &lt BLU TAB 
            >;
        };

        sym_layer {
            
            bindings = <
&kp LS(N1)     &kp LS(N2)     &kp LS(N3)     &kp LS(N4)     &kp LS(N5)          &kp LS(N6)    &kp LS(N7)      &kp LS(N8)     &kp LS(N9)     &kp LS(N0)
&kp DEL        &kp TILDE      &kp LBKT       &kp RBKT       &kp PIPE            &kp LEFT      &kp DOWN        &kp UP         &kp RIGHT      &kp SQT 
&kp LGUI       &kp GRAVE      &kp LBRC       &kp RBRC       &kp BSLH            &kp UNDER     &kp MINUS       &kp PLUS       &kp EQUAL      &kp DQT 
&kp LCTRL      &lt NAV ESC    &kp SPACE                                                                       &lt NUM RET    &lt SYM BSPC    &lt BLU TAB 
            >;
        };

        altshift_layer {
            
            bindings = <
&kp LS(LA(Q))         &kp LS(LA(W))         &kp LS(LA(E))         &kp LS(LA(R))         &kp LS(LA(T))              &kp LS(LA(Y))         &kp LS(LA(U))          &kp LS(LA(I))         &kp LS(LA(O))         &kp LS(LA(P))
&kp LS(LA(A))         &kp LS(LA(S))         &kp LS(LA(D))         &kp LS(LA(F))         &kp LS(LA(G))              &kp LS(LA(H))         &kp LS(LA(J))          &kp LS(LA(K))         &kp LS(LA(L))         &kp LS(LA(SQT))
&kp LS(LA(Z))         &kp LS(LA(X))         &kp LS(LA(C))         &kp LS(LA(V))         &kp LS(LA(B))              &kp LS(LA(N))         &kp LS(LA(M))          &kp LS(LA(COMMA))     &kp LS(LA(DOT))       &kp LS(LA(FSLH))
&kp LCTRL      &lt NAV ESC    &kp SPACE                                                                       &lt NUM RET    &lt SYM ESC    &lt BLU BSPC 
            >;
        };

        blu_layer {
            
            bindings = <
&trans         &trans         &trans         &trans         &trans              &bt BT_CLR     &bt BT_PRV     &bt BT_NXT     &trans         &trans
&trans         &bt BT_SEL 3   &bt BT_SEL 4   &trans         &trans              &trans                   &trans         &trans
&trans         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &trans              &trans         &trans         &trans         &trans         &trans
&kp LCTRL      &lt NAV ESC    &kp SPACE                                                                       &lt NUM RET    &lt SYM ESC    &lt BLU BSPC 
            >;
        };
    };
};
